//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try font.validate()
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 8 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `base`.
    static let base = Rswift.ColorResource(bundle: R.hostingBundle, name: "base")
    /// Color `darker-base-2`.
    static let darkerBase2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "darker-base-2")
    /// Color `darker-base`.
    static let darkerBase = Rswift.ColorResource(bundle: R.hostingBundle, name: "darker-base")
    /// Color `lighter-base-2`.
    static let lighterBase2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "lighter-base-2")
    /// Color `lighter-base`.
    static let lighterBase = Rswift.ColorResource(bundle: R.hostingBundle, name: "lighter-base")
    /// Color `overlap`.
    static let overlap = Rswift.ColorResource(bundle: R.hostingBundle, name: "overlap")
    /// Color `white`.
    static let white = Rswift.ColorResource(bundle: R.hostingBundle, name: "white")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "base", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func base(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.base, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darker-base", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkerBase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkerBase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "darker-base-2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkerBase2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkerBase2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lighter-base", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lighterBase(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lighterBase, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "lighter-base-2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lighterBase2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lighterBase2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "overlap", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func overlap(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.overlap, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.white, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "base", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func base(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.base.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "darker-base", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkerBase(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkerBase.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "darker-base-2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func darkerBase2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.darkerBase2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "lighter-base", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lighterBase(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lighterBase.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "lighter-base-2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func lighterBase2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.lighterBase2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "overlap", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func overlap(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.overlap.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "white", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func white(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.white.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `SFProDisplay-Bold.ttf`.
    static let sfProDisplayBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SFProDisplay-Bold", pathExtension: "ttf")

    /// `bundle.url(forResource: "SFProDisplay-Bold", withExtension: "ttf")`
    static func sfProDisplayBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sfProDisplayBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.font` struct is generated, and contains static references to 1 fonts.
  struct font: Rswift.Validatable {
    /// Font `SFProDisplay-Bold`.
    static let sfProDisplayBold = Rswift.FontResource(fontName: "SFProDisplay-Bold")

    /// `UIFont(name: "SFProDisplay-Bold", size: ...)`
    static func sfProDisplayBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sfProDisplayBold, size: size)
    }

    static func validate() throws {
      if R.font.sfProDisplayBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SFProDisplay-Bold' could not be loaded, is 'SFProDisplay-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 7 images.
  struct image {
    /// Image `bone-icon`.
    static let boneIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "bone-icon")
    /// Image `cat-icon`.
    static let catIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat-icon")
    /// Image `dog-icon`.
    static let dogIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "dog-icon")
    /// Image `dog-paw-icon`.
    static let dogPawIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "dog-paw-icon")
    /// Image `error-dog`.
    static let errorDog = Rswift.ImageResource(bundle: R.hostingBundle, name: "error-dog")
    /// Image `home-cat`.
    static let homeCat = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-cat")
    /// Image `home-dog`.
    static let homeDog = Rswift.ImageResource(bundle: R.hostingBundle, name: "home-dog")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "bone-icon", bundle: ..., traitCollection: ...)`
    static func boneIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.boneIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cat-icon", bundle: ..., traitCollection: ...)`
    static func catIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dog-icon", bundle: ..., traitCollection: ...)`
    static func dogIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dogIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "dog-paw-icon", bundle: ..., traitCollection: ...)`
    static func dogPawIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dogPawIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "error-dog", bundle: ..., traitCollection: ...)`
    static func errorDog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.errorDog, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-cat", bundle: ..., traitCollection: ...)`
    static func homeCat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeCat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "home-dog", bundle: ..., traitCollection: ...)`
    static func homeDog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.homeDog, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 36 localization keys.
    struct localizable {
      /// Value:  cm
      static let centimeter = Rswift.StringResource(key: "centimeter", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value:  kg
      static let kilo = Rswift.StringResource(key: "kilo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value:  years
      static let years = Rswift.StringResource(key: "years", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Add your Pet
      static let addPetTitle = Rswift.StringResource(key: "add.pet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: And how does your pet look like?
      static let petImageQuestion = Rswift.StringResource(key: "pet.image.question", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: BRED FOR:
      static let bredFor = Rswift.StringResource(key: "bred.for", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: BREED GROUP:
      static let bredGroup = Rswift.StringResource(key: "bred.group", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Breed Details
      static let breedDetails = Rswift.StringResource(key: "breed.details", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Breed:
      static let breed = Rswift.StringResource(key: "breed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CATS
      static let catsCaps = Rswift.StringResource(key: "cats.caps", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CHOOSE PHOTO
      static let buttonPhoto = Rswift.StringResource(key: "button.photo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cats
      static let cats = Rswift.StringResource(key: "cats", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: DOGS
      static let dogsCaps = Rswift.StringResource(key: "dogs.caps", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Dogs
      static let dogs = Rswift.StringResource(key: "dogs", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Ex.: Chico
      static let textFieldExample = Rswift.StringResource(key: "text.field.example", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: GENERATE NEW IMAGE
      static let buttonNewImage = Rswift.StringResource(key: "button.new.image", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: HAIRLESS:
      static let hairless = Rswift.StringResource(key: "hairless", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: HEIGHT:
      static let height = Rswift.StringResource(key: "height", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Home
      static let home = Rswift.StringResource(key: "home", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: I HAVE ONE!
      static let buttonHasPet = Rswift.StringResource(key: "button.has.pet", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: LAP:
      static let lap = Rswift.StringResource(key: "lap", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: LIFE SPAN:
      static let lifeSpan = Rswift.StringResource(key: "life.span", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: NATURAL:
      static let natural = Rswift.StringResource(key: "natural", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Name:
      static let name = Rswift.StringResource(key: "name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No.
      static let no = Rswift.StringResource(key: "no", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Pet Breeds
      static let petBreeds = Rswift.StringResource(key: "pet.breeds", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: REMOVE
      static let buttonRemove = Rswift.StringResource(key: "button.remove", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SEE BREED
      static let buttonSeeBreed = Rswift.StringResource(key: "button.see.breed", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SUBMIT
      static let buttonSubmit = Rswift.StringResource(key: "button.submit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: TEMPERAMENT:
      static let temperament = Rswift.StringResource(key: "temperament", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unknown
      static let unknown = Rswift.StringResource(key: "unknown", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WEIGHT:
      static let weight = Rswift.StringResource(key: "weight", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome to Everything-Pets!
      static let homeTitle = Rswift.StringResource(key: "home.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: What's the name of your 
      static let petNameQuestion = Rswift.StringResource(key: "pet.name.question", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Yes.
      static let yes = Rswift.StringResource(key: "yes", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your Pets
      static let userPetsTitle = Rswift.StringResource(key: "user.pets.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)

      /// Value:  cm
      static func centimeter(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("centimeter", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "centimeter"
        }

        return NSLocalizedString("centimeter", bundle: bundle, comment: "")
      }

      /// Value:  kg
      static func kilo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("kilo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "kilo"
        }

        return NSLocalizedString("kilo", bundle: bundle, comment: "")
      }

      /// Value:  years
      static func years(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("years", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "years"
        }

        return NSLocalizedString("years", bundle: bundle, comment: "")
      }

      /// Value: Add your Pet
      static func addPetTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("add.pet.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "add.pet.title"
        }

        return NSLocalizedString("add.pet.title", bundle: bundle, comment: "")
      }

      /// Value: And how does your pet look like?
      static func petImageQuestion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pet.image.question", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pet.image.question"
        }

        return NSLocalizedString("pet.image.question", bundle: bundle, comment: "")
      }

      /// Value: BRED FOR:
      static func bredFor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bred.for", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bred.for"
        }

        return NSLocalizedString("bred.for", bundle: bundle, comment: "")
      }

      /// Value: BREED GROUP:
      static func bredGroup(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("bred.group", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "bred.group"
        }

        return NSLocalizedString("bred.group", bundle: bundle, comment: "")
      }

      /// Value: Breed Details
      static func breedDetails(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("breed.details", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "breed.details"
        }

        return NSLocalizedString("breed.details", bundle: bundle, comment: "")
      }

      /// Value: Breed:
      static func breed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("breed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "breed"
        }

        return NSLocalizedString("breed", bundle: bundle, comment: "")
      }

      /// Value: CATS
      static func catsCaps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cats.caps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cats.caps"
        }

        return NSLocalizedString("cats.caps", bundle: bundle, comment: "")
      }

      /// Value: CHOOSE PHOTO
      static func buttonPhoto(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.photo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button.photo"
        }

        return NSLocalizedString("button.photo", bundle: bundle, comment: "")
      }

      /// Value: Cats
      static func cats(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("cats", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "cats"
        }

        return NSLocalizedString("cats", bundle: bundle, comment: "")
      }

      /// Value: DOGS
      static func dogsCaps(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dogs.caps", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dogs.caps"
        }

        return NSLocalizedString("dogs.caps", bundle: bundle, comment: "")
      }

      /// Value: Dogs
      static func dogs(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("dogs", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "dogs"
        }

        return NSLocalizedString("dogs", bundle: bundle, comment: "")
      }

      /// Value: Ex.: Chico
      static func textFieldExample(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("text.field.example", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "text.field.example"
        }

        return NSLocalizedString("text.field.example", bundle: bundle, comment: "")
      }

      /// Value: GENERATE NEW IMAGE
      static func buttonNewImage(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.new.image", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button.new.image"
        }

        return NSLocalizedString("button.new.image", bundle: bundle, comment: "")
      }

      /// Value: HAIRLESS:
      static func hairless(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hairless", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hairless"
        }

        return NSLocalizedString("hairless", bundle: bundle, comment: "")
      }

      /// Value: HEIGHT:
      static func height(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("height", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "height"
        }

        return NSLocalizedString("height", bundle: bundle, comment: "")
      }

      /// Value: Home
      static func home(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home"
        }

        return NSLocalizedString("home", bundle: bundle, comment: "")
      }

      /// Value: I HAVE ONE!
      static func buttonHasPet(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.has.pet", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button.has.pet"
        }

        return NSLocalizedString("button.has.pet", bundle: bundle, comment: "")
      }

      /// Value: LAP:
      static func lap(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("lap", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "lap"
        }

        return NSLocalizedString("lap", bundle: bundle, comment: "")
      }

      /// Value: LIFE SPAN:
      static func lifeSpan(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("life.span", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "life.span"
        }

        return NSLocalizedString("life.span", bundle: bundle, comment: "")
      }

      /// Value: NATURAL:
      static func natural(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("natural", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "natural"
        }

        return NSLocalizedString("natural", bundle: bundle, comment: "")
      }

      /// Value: Name:
      static func name(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("name", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "name"
        }

        return NSLocalizedString("name", bundle: bundle, comment: "")
      }

      /// Value: No.
      static func no(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("no", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "no"
        }

        return NSLocalizedString("no", bundle: bundle, comment: "")
      }

      /// Value: Pet Breeds
      static func petBreeds(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pet.breeds", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pet.breeds"
        }

        return NSLocalizedString("pet.breeds", bundle: bundle, comment: "")
      }

      /// Value: REMOVE
      static func buttonRemove(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.remove", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button.remove"
        }

        return NSLocalizedString("button.remove", bundle: bundle, comment: "")
      }

      /// Value: SEE BREED
      static func buttonSeeBreed(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.see.breed", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button.see.breed"
        }

        return NSLocalizedString("button.see.breed", bundle: bundle, comment: "")
      }

      /// Value: SUBMIT
      static func buttonSubmit(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("button.submit", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "button.submit"
        }

        return NSLocalizedString("button.submit", bundle: bundle, comment: "")
      }

      /// Value: TEMPERAMENT:
      static func temperament(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("temperament", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "temperament"
        }

        return NSLocalizedString("temperament", bundle: bundle, comment: "")
      }

      /// Value: Unknown
      static func unknown(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("unknown", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "unknown"
        }

        return NSLocalizedString("unknown", bundle: bundle, comment: "")
      }

      /// Value: WEIGHT:
      static func weight(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("weight", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "weight"
        }

        return NSLocalizedString("weight", bundle: bundle, comment: "")
      }

      /// Value: Welcome to Everything-Pets!
      static func homeTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("home.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "home.title"
        }

        return NSLocalizedString("home.title", bundle: bundle, comment: "")
      }

      /// Value: What's the name of your 
      static func petNameQuestion(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("pet.name.question", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "pet.name.question"
        }

        return NSLocalizedString("pet.name.question", bundle: bundle, comment: "")
      }

      /// Value: Yes.
      static func yes(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("yes", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "yes"
        }

        return NSLocalizedString("yes", bundle: bundle, comment: "")
      }

      /// Value: Your Pets
      static func userPetsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("user.pets.title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "user.pets.title"
        }

        return NSLocalizedString("user.pets.title", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
